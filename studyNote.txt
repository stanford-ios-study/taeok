
	⁃	Target/Action and Outlets and Outlet Collections
	⁃	Methods and Properties ( instance variables )
	⁃	Property Observer (didset)
	⁃	array<Element>
	⁃	MVC
	⁃	Value Type (struct) VS reference types (class)
	⁃	initializers
	⁃	Type (static) methods
	⁃	lazy properties
	⁃	for in loops
	⁃	Dictionary<key,value>
	⁃	Type conversion 
	⁃	for i in stride(from: 0.5, through:15.25, by: 0.3 )
	⁃	Computed Properties
	⁃	Autolayout
	⁃	Access Control ( 접근 제어 )
	⁃	Assert
	⁃	Extensions
	⁃	Optionals
	⁃	tuple
	-	조건문과 반복문
	-	enum & optional
	- 	protocols
	-	closures

For문
: 
ex)
 for i in 0..<100 {

}
ex)
 for _ in 0..<100 { } 

ex) 
 for i in array.indices { // array배열의 처음부터 끝까지
	printf()
}
 


- Extensions 
: 확장을 통해, 이미 정의된 타입에 새로운 속성이나 메서드를 추가할 수 있음.
 단, 값을. 저장하는 형태가 아님, ( 저장공간을 따로 필요로 하지 않음 ) ( 참고 - ViewController.swift )


ex.)
extension String {
	var length: Int {
		return self.characters.count
	}

	func reversed() -> String {
		return self.characters.reversed().map { String($0) }.joined(separator:"")
	}
}
let str = "ABCDEFG"
str.length // 5
str.reversed() // GFEDCBA



Assert : API를 부적절한 사용으로부터 보호하기 위함
ex.)
assert(성립되어야하는 조건 , “조건에 해당하지 않을 때, 오류메시지”)




- Access Control 
:
internal (default ) - 앱이나 프레임워크의 모든 요소가 접근 가능한 코드
private : 내부에서만 구현되는 모델,메소드,변수는 거의 private설정하면 됨.
private(set) : 외부에서 set은 불가능하지만, 불러오는것은 가능 
fileprivate : 서로의 메소드나 변수를 불러올 수 있음.


tuple 
: 메소드나 변수가 없는 소형 구조체로 값만 들어있음.
요소의 이름을 유연하게 정할 수 있음.

ex:
 let x : (String, Int, Double) = (“hello”, 5, 0.85) 
 let (word, number, value) = x 
 print(word) -> hello.
 print(number) -> 5
 print(value) -> 0.85

ex:
 let x: (w: String, i: Int, v: Double) = (“hello”, 5, 0.85)
 print(x.w) > hello
 print(x.i) > 5

ex: 
 func getSize() -> (weight: Double, height: Double) 
{ return (250,80) }

 let x = getSize()
 print(“weight is \(x.weight)”)


- enum
 
 ex. 
enum FastFoodMenuItem {
    case hamburger(numberOfPatties: Int)
    case fries(size: FryOrderSize)
    case drink(String, ounces: Int)
    case cookie
    
    func isIncludedInSepcialOrder(number: Int) -> Bool {}
}
enum FryOrderSize {    // FryOrderSize에 대한 enum을 한번 더 나열해 줄 수 있음.
    case large
    case small
}

//var menuItem = FastFoodMenuItem.hamburger(numberOfPatties: 2)
var menuItem = FastFoodMenuItem.drink("CoKe", ounces: 30)
switch menuItem {
case .hamburger(let pattyCount): print("a burger with \(pattyCount) patties")
case .fries: print("fries")
case .drink(let brand, let ounces): print("a \(ounces)oz \(brand)")
default: print("nothing...")
}


- protocols
: 리턴값을 가지는 메소드와 변수의 리스트

ex.
protocol SomeProtocol : class, InheritedProtocol1, InheritedProtocol2 { 
// SomeProtocol은 Inherita~...(프로토콜) 을 몇개든지 상송받을 수 있음.
// 프로토콜이 절대 구조체에서 구현되지 않는다면, mutating이 필요없지만, 프로토콜을 선언할때'class'를 붙임

    var someProperty: Int { get set }

    func aMethod(arg1: Double, anotherArgument: String) -> SomeType

    mutating func changeIt()
	//프로토콜내의 메소드가 구조체에 의해 구현되어 그 내용이 수정된다면, 반드시 mutating 표시를 해주어야 함

    required init(arg: Type)

}


